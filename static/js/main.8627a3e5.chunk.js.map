{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.png"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","nota1Ref","React","createRef","nota2Ref","CCRef","PCRef","CSRef","mostrarResultado","state","nota3","react_default","a","createElement","className","mostrarResultadoPPS","nota4","tabIndex","e","preventDefault","nota1","current","value","nota2","setState","CC","parseInt","PC","CS","_this2","src","logo","alt","esm","selectedIndex","onSelect","onSubmit","calcularNota","bind","htmlFor","type","step","name","placeholder","ref","href","calcularPPS","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"iQAoNeA,qBA9Mb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMRQ,SAAWC,IAAMC,YAPET,EAQnBU,SAAWF,IAAMC,YARET,EAiBpBW,MAAQH,IAAMC,YAjBMT,EAkBpBY,MAAQJ,IAAMC,YAlBMT,EAmBpBa,MAAQL,IAAMC,YAnBMT,EAoCnBc,iBAAmB,WAEjB,OAAyB,IAArBd,EAAKe,MAAMC,MAAoB,KAGjCC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gCAAd,6DACyDH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,IAAIpB,EAAKe,MAAMC,UA1CpFhB,EAiEnBqB,oBAAsB,WAEpB,OAAyB,IAArBrB,EAAKe,MAAMO,MAAoB,KAGjCL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gCAAd,yCACwCH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,IAAIpB,EAAKe,MAAMO,UArEpFtB,EAAKe,MAAQ,CAACC,MAAO,GACrBhB,EAAKe,MAAQ,CAACQ,SAAU,GAHPvB,4EAuBNwB,GACXA,EAAEC,iBAEF,IAAIC,EAAQvB,KAAKI,SAASoB,QAAQC,MAC9BC,EAAQ1B,KAAKO,SAASiB,QAAQC,MAMlC,OAJAzB,KAAK2B,SAAS,CACZd,OAAS,GAAe,GAARU,EAAwB,IAARG,IAAmB,MAG9C1B,KAAKY,MAAMC,0CAkBRQ,GACVA,EAAEC,iBAEF,IAAIM,EAAKC,SAAS7B,KAAKQ,MAAMgB,QAAQC,OACjCK,EAAKD,SAAS7B,KAAKS,MAAMe,QAAQC,OACjCM,EAAKF,SAAS7B,KAAKU,MAAMc,QAAQC,OAMrC,OAJAzB,KAAK2B,SAAS,CACZR,OAAQ,KAAKS,EAAGG,GAAKH,GAAIE,EAAGF,IAAMG,IAG7B/B,KAAKY,MAAMO,uCAgBX,IAAAa,EAAAhC,KACP,OAEEc,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACnBH,EAAAC,EAAAC,cAAA,OAAKiB,IAAKC,IAAMC,IAAI,OAAOlB,UAAU,sBAKrCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACjBH,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,cAAerC,KAAKY,MAAMQ,SAAUkB,SAAU,SAAAlB,GAAQ,OAAIY,EAAKL,SAAS,CAAEP,eAC9EN,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACEtB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,8BACAtB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,4BAEFtB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KAIItB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,0EACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMuB,SAAUvC,KAAKwC,aAAaC,KAAKzC,OACrCc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAO0B,QAAQ,QAAQzB,UAAU,kBAAjC,kBACAH,EAAAC,EAAAC,cAAA,SACEC,UAAU,eACV0B,KAAK,SACLC,KAAK,MACLC,KAAK,QACLC,YAAY,kCACVC,IAAK/C,KAAKI,YAGhBU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAO0B,QAAQ,QAAQzB,UAAU,kBAAjC,kBACAH,EAAAC,EAAAC,cAAA,SACEC,UAAU,eACV0B,KAAK,SACLC,KAAK,MACLC,KAAK,QACLC,YAAY,mCACZC,IAAK/C,KAAKO,YAGdO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,SAAO2B,KAAK,SAASlB,MAAM,gBAAgBR,UAAU,yBACrDH,EAAAC,EAAAC,cAAA,KAAGgC,KAAK,uBAAuB/B,UAAU,gBAAzC,iBAMRH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZjB,KAAKW,qBAIZG,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KAIItB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,8GACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMuB,SAAUvC,KAAKiD,YAAYR,KAAKzC,OACpCc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAO0B,QAAQ,KAAKzB,UAAU,kBAA9B,8DACAH,EAAAC,EAAAC,cAAA,SACEC,UAAU,eACV0B,KAAK,SACLC,KAAK,MACLC,KAAK,KACLC,YAAY,qEACVC,IAAK/C,KAAKQ,SAGhBM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAO0B,QAAQ,KAAKzB,UAAU,kBAA9B,yCACAH,EAAAC,EAAAC,cAAA,SACEC,UAAU,eACV0B,KAAK,SACLC,KAAK,MACLC,KAAK,KACLC,YAAY,gDACZC,IAAK/C,KAAKS,SAIdK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAO0B,QAAQ,KAAKzB,UAAU,kBAA9B,8CACAH,EAAAC,EAAAC,cAAA,SACEC,UAAU,eACV0B,KAAK,SACLC,KAAK,MACLC,KAAK,KACLC,YAAY,qDACZC,IAAK/C,KAAKU,SAKdI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,SAAO2B,KAAK,SAASlB,MAAM,eAAeR,UAAU,yBACpDH,EAAAC,EAAAC,cAAA,KAAGgC,KAAK,uBAAuB/B,UAAU,gBAAzC,iBAKRH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZjB,KAAKkB,oCAlMFb,IAAM6C,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.8627a3e5.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.png';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {nota3: 0}\n    this.state = {tabIndex: 0 }; //Para los tabs\n  }\n  \n  /* Variables para la parte de las notas */\n  nota1Ref = React.createRef();\n  nota2Ref = React.createRef(); \n   /* Fin Variables para la parte de las notas */\n  \n  /* Variables para la parte del calculo del pps */\n  /*\n    CC : Creditos intentados\n    PC : Puntos de calidad PGA totales\n    CS : Creditos Matriculados en el semestre\n  */\n CCRef = React.createRef();\n PCRef = React.createRef();\n CSRef = React.createRef();\n  /* Fin Variables para la parte del calculo del pps */\n \n  /* Metodo para el calculo de la nota */\n  calcularNota(e) {\n    e.preventDefault();    \n\n    let nota1 = this.nota1Ref.current.value;\n    let nota2 = this.nota2Ref.current.value;\n\n    this.setState({\n      nota3: ( 3 - ( (nota1 * .30) + (nota2 * .35) ) ) / 0.35\n    });\n\n    return this.state.nota3;\n  }\n\n  mostrarResultado = () => {\n\n    if (this.state.nota3 === 0) return null;\n\n    return (\n      <h3 className=\"text-center alert alert-info\">\n        La nota mínima requerida para aprobar la asignatura es:<br/><h2><strong className=\"\">{this.state.nota3}</strong></h2>\n      </h3>\n    )\n  }\n  /* Fin Metodo para el calculo de la nota */\n\n\n  /* Metodo para el calculo del PPS */\n  \n  calcularPPS(e) {\n    e.preventDefault();    \n\n    let CC = parseInt(this.CCRef.current.value);\n    let PC = parseInt(this.PCRef.current.value);\n    let CS = parseInt(this.CSRef.current.value);\n    \n    this.setState({\n      nota4: (3.2*(CC+CS)-(CC*(PC/CC)))/CS\n    });\n\n    return this.state.nota4;\n  }\n\n  mostrarResultadoPPS = () => {\n\n    if (this.state.nota4 === 0) return null;\n   \n    return (\n      <h3 className=\"text-center alert alert-info\">\n        PPS requerido para superar PA y RA es:<br/><h2><strong className=\"\">{this.state.nota4}</strong></h2>\n      </h3>\n    )\n  }\n   \n  /* Fin Metodo para el calculo del PPS */\n  \n  render() {\n    return (\n      //Logo\n      <div>\n        <div className=\"container mt-5\">\n        <div className=\"row justify-content-center text-white\">\n          <div className=\"col-md-6\">\n      <img src={logo} alt=\"Logo\" className=\"img-fluid mb-5\"/>\n      </div>\n      </div>\n      </div>\n\n      <div className=\"container mt-5\">\n      <div className=\"row justify-content-center text-white\">\n        <div className=\"col-md-6\">\n      <Tabs selectedIndex={this.state.tabIndex} onSelect={tabIndex => this.setState({ tabIndex })}>\n        <TabList>\n          <Tab>Calculadora de 3 Nota</Tab>\n          <Tab>Calculadora de PPS</Tab>\n        </TabList>\n        <TabPanel>\n            {/*\n            <h1 className=\"text-center\">Calculadora</h1>\n            */}\n            <h2 className=\"text-center\">¿Cuánto debo obtener en el 3er corte para aprobar mi asignatura?</h2>\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <form onSubmit={this.calcularNota.bind(this)}>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"nota1\" className=\"text-secondary\">Nota 1er Corte</label>\n                    <input\n                      className=\"form-control\"\n                      type=\"number\"\n                      step=\".01\"\n                      name=\"nota1\"\n                      placeholder=\"Digita la nota del primer corte\"\n                        ref={this.nota1Ref}\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"nota2\" className=\"text-secondary\">Nota 2do Corte</label>\n                    <input\n                      className=\"form-control\"\n                      type=\"number\"\n                      step=\".01\"\n                      name=\"nota1\"\n                      placeholder=\"Digita la nota del segundo corte\"\n                      ref={this.nota2Ref}\n                    />\n                  </div>\n                  <div className=\"form-group text-center\">\n                    <input type=\"submit\" value=\"Calcular Nota\" className=\"btn btn-success mr-2\" />\n                    <a href=\"/calculadora3ernota/\" className=\"btn btn-info\">Reiniciar</a>\n                  </div>\n                </form>\n              </div>\n            </div>\n            \n            <div className=\"mt-2\">\n              {this.mostrarResultado()}\n            </div>\n            \n        </TabPanel>\n        <TabPanel>\n            {/*  \n            <h1 className=\"text-center\">Calculadora de PPS </h1>\n            */}\n            <h2 className=\"text-center\">¿Cuánto PPS se debe obtener para superar PA(Prueba Académica) y RA(Recuperación Académica)?</h2>\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <form onSubmit={this.calcularPPS.bind(this)}>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"CC\" className=\"text-secondary\">Créditos Totales Cursados (o Créditos intentados) CC</label>\n                    <input\n                      className=\"form-control\"\n                      type=\"number\"\n                      step=\".01\"\n                      name=\"CC\"\n                      placeholder=\"Digite los créditos Totales Cursados (o Créditos intentados)\"\n                        ref={this.CCRef}\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"PC\" className=\"text-secondary\">Puntos de calidad para PGA totales PC</label>\n                    <input\n                      className=\"form-control\"\n                      type=\"number\"\n                      step=\".01\"\n                      name=\"PC\"\n                      placeholder=\"Digita los puntos de calidad para PGA totales\"\n                      ref={this.PCRef}\n                    />\n                  </div>\n\n                  <div className=\"form-group\">\n                    <label htmlFor=\"CS\" className=\"text-secondary\">Créditos Matriculados en el Semestre CS</label>\n                    <input\n                      className=\"form-control\"\n                      type=\"number\"\n                      step=\".01\"\n                      name=\"CS\"\n                      placeholder=\"Digita los créditos Matriculados en el Semestre\"\n                      ref={this.CSRef}\n                    />\n                  </div>\n\n\n                  <div className=\"form-group text-center\">\n                    <input type=\"submit\" value=\"Calcular PPS\" className=\"btn btn-success mr-2\" />\n                    <a href=\"/calculadora3ernota/\" className=\"btn btn-info\">Reiniciar</a>\n                  </div>\n                </form>\n              </div>\n            </div>\n            <div className=\"mt-2\">\n              {this.mostrarResultadoPPS()}\n            </div>\n          \n        </TabPanel>\n      </Tabs>\n      </div>\n      </div>   \n            </div>\n            </div>  \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n//ReactDOM.render(<CalculaPPS />, document.getElementById('pps'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.de6fb0dc.png\";"],"sourceRoot":""}