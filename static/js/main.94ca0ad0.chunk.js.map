{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.png"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","nota1Ref","React","createRef","nota2Ref","mostrarResultado","state","nota3","react_default","a","createElement","className","e","preventDefault","nota1","current","value","nota2","setState","src","logo","alt","onSubmit","calcularNota","bind","htmlFor","type","step","name","placeholder","ref","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"oNAsFeA,cAlFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAIRQ,SAAWC,IAAMC,YALET,EAMnBU,SAAWF,IAAMC,YANET,EAqBnBW,iBAAmB,WAEjB,OAAyB,IAArBX,EAAKY,MAAMC,MAAoB,KAGjCC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gCAAd,0DACyDH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,IAAIjB,EAAKY,MAAMC,UAzBrGb,EAAKY,MAAQ,CAACC,MAAO,GAFJb,4EAQNkB,GACXA,EAAEC,iBAEF,IAAIC,EAAQjB,KAAKI,SAASc,QAAQC,MAC9BC,EAAQpB,KAAKO,SAASW,QAAQC,MAMlC,OAJAnB,KAAKqB,SAAS,CACZX,OAAQ,EAAa,IAARO,EAAwB,IAARG,GAAgB,KAGxCpB,KAAKS,MAAMC,uCAelB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKS,IAAKC,IAAMC,IAAI,OAAOV,UAAU,mBACrCH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,eACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,0EACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMY,SAAUzB,KAAK0B,aAAaC,KAAK3B,OACrCW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOe,QAAQ,QAAQd,UAAU,kBAAjC,kBACAH,EAAAC,EAAAC,cAAA,SACEC,UAAU,eACVe,KAAK,SACLC,KAAK,MACLC,KAAK,QACLC,YAAY,kCACVC,IAAKjC,KAAKI,YAGhBO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOe,QAAQ,QAAQd,UAAU,kBAAjC,kBACAH,EAAAC,EAAAC,cAAA,SACEC,UAAU,eACVe,KAAK,SACLC,KAAK,MACLC,KAAK,QACLC,YAAY,mCACZC,IAAKjC,KAAKO,YAGdI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,SAAOgB,KAAK,SAASV,MAAM,0BAA0BL,UAAU,yBAC/DH,EAAAC,EAAAC,cAAA,KAAGqB,KAAK,IAAIpB,UAAU,gBAAtB,iBAKRH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZd,KAAKQ,8BA1EFH,IAAM8B,WCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.94ca0ad0.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.png';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {nota3: 0}\n  }\n\n  nota1Ref = React.createRef();\n  nota2Ref = React.createRef();  \n\n  calcularNota(e) {\n    e.preventDefault();    \n\n    let nota1 = this.nota1Ref.current.value;\n    let nota2 = this.nota2Ref.current.value;\n\n    this.setState({\n      nota3: (3 - (nota1 * .25) - (nota2 * .25)) / 0.5\n    });\n\n    return this.state.nota3;\n  }\n\n  mostrarResultado = () => {\n\n    if (this.state.nota3 === 0) return null;\n\n    return (\n      <h3 className=\"text-center alert alert-info\">\n        La nota que debo obtener para aprobar mi asignatura es:<br/><h2><strong className=\"\">{this.state.nota3}</strong></h2>\n      </h3>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"container mt-5\">\n        <div className=\"row justify-content-center text-white\">\n          <div className=\"col-md-6\">\n            <img src={logo} alt=\"Logo\" className=\"img-fluid mb-5\"/>\n            <h1 className=\"text-center\">Calculadora</h1>\n            <h2 className=\"text-center\">¿Cuánto debo obtener en el 3er corte para aprobar mi asignatura?</h2>\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <form onSubmit={this.calcularNota.bind(this)}>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"nota1\" className=\"text-secondary\">Nota 1er Corte</label>\n                    <input\n                      className=\"form-control\"\n                      type=\"number\"\n                      step=\".01\"\n                      name=\"nota1\"\n                      placeholder=\"Digita la nota del primer corte\"\n                        ref={this.nota1Ref}\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"nota2\" className=\"text-secondary\">Nota 2do Corte</label>\n                    <input\n                      className=\"form-control\"\n                      type=\"number\"\n                      step=\".01\"\n                      name=\"nota1\"\n                      placeholder=\"Digita la nota del segundo corte\"\n                      ref={this.nota2Ref}\n                    />\n                  </div>\n                  <div className=\"form-group text-center\">\n                    <input type=\"submit\" value=\"Calcular Nota 3er Corte\" className=\"btn btn-success mr-2\" />\n                    <a href=\"/\" className=\"btn btn-info\">Reiniciar</a>\n                  </div>\n                </form>\n              </div>\n            </div>\n            <div className=\"mt-2\">\n              {this.mostrarResultado()}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.de6fb0dc.png\";"],"sourceRoot":""}